b3 <- createTurtles(n = 3,
coords = cbind(xcor = 50,
ycor = 50))
# Visualize the butterflies
points(b3,
pch = 16,
col = of(agents = b3,
var = "color"))
# What's inside this loop will be iterated 50 times
for (time in 1:50) {
# With a probability of 0.5
if (runif(n = 1, min = 0, max = 1) < 0.5) {
# Either move all butterflies uphill considering the 8 neighboring patches
# i.e., move each butterfly to the patch with the highest (elevation) value among the 8 patches around
b3 <- uphill(world = hill,
turtles = b3,
nNeighbors = 8)
browser()
} else {
# Or move all butterflies to one of its neighboring patches at random
# First, identify for each butterfly the 8 patches around each one
allNeighbors <- neighbors(world = hill,
agents = b3,
nNeighbors = 8)
# Second, for each set of "neighboring patches", select one randomly
oneNeighbor <- oneOf(allNeighbors)
# Finally, move the butterflies to their randomly selected neighboring patch
b3 <- moveTo(turtles = b3,
agents = oneNeighbor)
browser()
}
# Visualize each new position for t1
points(b3,
pch = 16,
col = of(agents = b3,
var = "color"))
print(time)
# Wait 1 second between each loop to see the butterflies moving
Sys.sleep(1)
}
library(NetLogoR)
rm(list=ls()) # reset the R environment
set.seed(1234) # same seed so that everybody has the same results
# Create a world with the desired extent
hill <- createWorld(minPxcor = 1,
maxPxcor = 100,
minPycor = 1,
maxPycor = 100)
plot(hill)
# Define the patches values
# Elevation decreases linearly with distance from the center of the hill
# Hill center is at (30,30)
# The hill is 100 units high
elevation <- 100 - NLdist(agents = patches(hill), # distance between agents and agents2
agents2 = cbind(x = 30,
y = 30))
# Assign the elevation values to the patches
hill <- NLset(world = hill,
agents = patches(hill),
val = elevation)
# Visualize the world
plot(hill)
# Create turtles (3 butterflies in this model)
# The butterflies initial location are at [50,50]
b3 <- createTurtles(n = 3,
coords = cbind(xcor = 50,
ycor = 50))
# Visualize the butterflies
points(b3,
pch = 16,
col = of(agents = b3,
var = "color"))
# What's inside this loop will be iterated 50 times
for (time in 1:50) {
# With a probability of 0.5
if (runif(n = 1, min = 0, max = 1) < 0.5) {
# Either move all butterflies uphill considering the 8 neighboring patches
# i.e., move each butterfly to the patch with the highest (elevation) value among the 8 patches around
b3 <- uphill(world = hill,
turtles = b3,
nNeighbors = 8)
browser()
} else {
# Or move all butterflies to one of its neighboring patches at random
# First, identify for each butterfly the 8 patches around each one
allNeighbors <- neighbors(world = hill,
agents = b3,
nNeighbors = 8)
# Second, for each set of "neighboring patches", select one randomly
oneNeighbor <- oneOf(allNeighbors)
# Finally, move the butterflies to their randomly selected neighboring patch
b3 <- moveTo(turtles = b3,
agents = oneNeighbor)
browser()
}
# Visualize each new position for t1
points(b3,
pch = 16,
col = of(agents = b3,
var = "color"))
print(time)
# Wait 1 second between each loop to see the butterflies moving
Sys.sleep(1)
}
# The butterflies initial location are at [50,50]
b3 <- createTurtles(n = 3,
coords = cbind(xcor = 50,
ycor = 50))
# Visualize the butterflies
points(b3,
pch = 16,
col = of(agents = b3,
var = "color"))
# What's inside this loop will be iterated 50 times
for (time in 1:50) {
# With a probability of 0.5
prob <- runif(n = 1, min = 0, max = 1)
if (prob < 0.5) {
# Either move all butterflies uphill considering the 8 neighboring patches
# i.e., move each butterfly to the patch with the highest (elevation) value among the 8 patches around
b3 <- uphill(world = hill,
turtles = b3,
nNeighbors = 8)
browser()
} else {
# Or move all butterflies to one of its neighboring patches at random
# First, identify for each butterfly the 8 patches around each one
allNeighbors <- neighbors(world = hill,
agents = b3,
nNeighbors = 8)
# Second, for each set of "neighboring patches", select one randomly
oneNeighbor <- oneOf(allNeighbors)
# Finally, move the butterflies to their randomly selected neighboring patch
b3 <- moveTo(turtles = b3,
agents = oneNeighbor)
browser()
}
# Visualize each new position for t1
points(b3,
pch = 16,
col = of(agents = b3,
var = "color"))
print(time)
# Wait 1 second between each loop to see the butterflies moving
Sys.sleep(1)
}
prob
prob
library(NetLogoR)
library(testthat)
rm(list=ls()) # reset the R environment
set.seed(1234) # same seed so that everybody has the same results
runif(n = 100)
# Create a world of 10 x 10 patches with random values on each patch between 0 and 1
w1 <- createWorld(minPxcor = 1,
maxPxcor = 10,
minPycor = 1,
maxPycor = 10,
data = runif(n = 100))
plot(w1)
# Create a population with 15 males and 15 females
# Random locations using randomXYcor()
t1 <- createTurtles(n = 30,
coords = randomXYcor(world = w1,
n = 30))
t1
t1 <- turtlesOwn(turtles = t1,
tVar = "sex",
tVal = c(rep("male", 15), rep("female", 15)))
t1
# Color of males = red, color of females = black
t1 <- NLset(turtles = t1,
agents = t1,
var = "color",
val = c(rep("red", 15), rep("black", 15)))
t1
of(agents = t1,
var = "color")
points(t1,
pch = 19,
col = of(agents = t1,
var = "color"))
moveFemale <- function(movingInd){
movingInd <- right(turtles = movingInd,
angle = runif(n = NLcount(movingInd),
min = 0,
max = 360))
movingInd <- fd(turtles = movingInd,
dist = 2,
world = w1,
torus = TRUE)
return(movingInd)
}
t1
t1@.Data
moveFemale(movingInd = t1)
testt1 <- moveFemale(movingInd = t1)
testt1@.Data
t1@.Data
help("moveTo")
movingInd=t1
# What are the cells around the individuals?
allNeighbors <- neighbors(world = w1,
agents = movingInd,
nNeighbors = 8)
allNeighbors
help("patchHere")
NLwith(agents = t1,
var = "sex",
val = "female")
# On which cells there are females?
patchFemale <- patchHere(world = w1,
turtles = NLwith(agents = t1,
var = "sex",
val = "female"))
patchFemale
patchFemale
patchFemale <- cbind(patchFemale,
femaleHere = 1)
patchFemale
allNeighborsFem <- merge(allNeighbors,
patchFemale,
all.x = TRUE)
allNeighborsFem
allNeighborsFem[is.na(allNeighborsFem$femaleHere), "femaleHere"] <- 0
allNeighborsFem
unique(allNeighborsFem$id)
each=25
allNeighborsFem
head(allNeighborsFem)
allNeighborsFem[allNeighborsFem$id == each, ]
sum(allNeighborsFem[allNeighborsFem$id == each, "femaleHere"]) == 0
as.matrix(allNeighborsFem[allNeighborsFem$id == each, c("pxcor", "pycor")])
oneOf(as.matrix(allNeighborsFem[allNeighborsFem$id == each, c("pxcor", "pycor")]))
selectPatches
selectPatches <- cbind(pxcor = numeric(),
pycor = numeric())
selectPatches
selectPatches <- rbind(selectPatches,
oneOf(as.matrix(allNeighborsFem[allNeighborsFem$id == each, c("pxcor", "pycor")])))
selectPatches
allNeighborsFem[allNeighborsFem$id == each, ]
allNeighborsFem[allNeighborsFem$id == each, ][4,4] <- 1
allNeighborsFem[allNeighborsFem$id == each, ]
sum(allNeighborsFem[allNeighborsFem$id == each, "femaleHere"]) == 1
allNeighborsFem[allNeighborsFem$id == each &
allNeighborsFem$femaleHere == 1, c("pxcor", "pycor"), drop = FALSE]
allNeighborsFem[allNeighborsFem$id == each, ][4,5] <- 1
allNeighborsFem[allNeighborsFem$id == each, ][5,4] <- 1
allNeighborsFem[allNeighborsFem$id == each, ]
as.matrix(allNeighborsFem[allNeighborsFem$id == each &
allNeighborsFem$femaleHere == 1, c("pxcor", "pycor")])
oneOf(as.matrix(allNeighborsFem[allNeighborsFem$id == each &
allNeighborsFem$femaleHere == 1, c("pxcor", "pycor")]))
newFemales <- moveFemale(NLwith(agent = t1,
var = "sex",
val = "female"))
newFemales
newMales <- moveMale(NLwith(agent = t1,
var = "sex",
val = "male"))
# Movement of males: move to one of the 8 neighboring cells where there is a female on it, otherwise on one of the 8 neighboring cells randomly
moveMale <- function(movingInd){
# What are the cells around the individuals?
allNeighbors <- neighbors(world = w1,
agents = movingInd,
nNeighbors = 8)
# On which cells there are females?
patchFemale <- patchHere(world = w1,
turtles = NLwith(agents = t1,
var = "sex",
val = "female"))
patchFemale <- cbind(patchFemale,
femaleHere = 1)
allNeighborsFem <- merge(allNeighbors,
patchFemale,
all.x = TRUE)
allNeighborsFem[is.na(allNeighborsFem$femaleHere), "femaleHere"] <- 0
selectPatches <- cbind(pxcor = numeric(),
pycor = numeric())
for(each in unique(allNeighborsFem$id)){ # for each moving individual
# If there are no females on the cells around, choose one cell randomly
if(sum(allNeighborsFem[allNeighborsFem$id == each, "femaleHere"]) == 0){
selectPatches <- rbind(selectPatches,
oneOf(as.matrix(allNeighborsFem[allNeighborsFem$id == each, c("pxcor", "pycor")])))
} else if(sum(allNeighborsFem[allNeighborsFem$id == each, "femaleHere"]) == 1){ # If there is one cell with female(s) on it, choose this cell
selectPatches <- rbind(selectPatches,
allNeighborsFem[allNeighborsFem$id == each &
allNeighborsFem$femaleHere == 1, c("pxcor", "pycor"), drop = FALSE])
} else { # If there are several cells with females on it, choose one cell among these ones randomly
selectPatches <- rbind(selectPatches,
oneOf(as.matrix(allNeighborsFem[allNeighborsFem$id == each &
allNeighborsFem$femaleHere == 1, c("pxcor", "pycor")])))
}
}
# Move the individuals to the chosen patches
movingInd <- moveTo(turtles = movingInd,
agents = as.matrix(selectPatches))
return(movingInd)
}
newMales <- moveMale(NLwith(agent = t1,
var = "sex",
val = "male"))
newMales
expect_equal(NLcount(newFemales) + NLcount(newMales),
NLcount(t1))
NLcount(newFemales)
NLcount(newMales)
NLcount(t1)
t1
newFemales <- moveFemale(NLwith(agent = t1,
var = "sex",
val = "female"))
newMales <- moveMale(NLwith(agent = t1,
var = "sex",
val = "male"))
newFemales
newMales
# Need to put back together the modified males and females for the next step (updated t1)
t1 <- turtleSet(newFemales,
newMales)
t1
library(raster)
library(rgdal)
library(rgeos)
library(maptools)
# Plots
gaspNat <- shapefile("D:/Save_pc_portable/Thesis/Chapitre1_IBM/ArcGIS/study_area/gaspe_nat_Project.shp")
library(SpaDES)
dev()
plot(gaspNat, col=NA, border="black")
for(i in 1:length(listBestNet)){
plot(listBestNet[[i]], col=rgb(0.8,0.6,0.2,0.03),border=NA, add=TRUE)
print(i)
}
load("C:/Users/Bauduin/Documents/CEFE/Manuscript/Chap3/data/networksData.RData")
load("C:/Users/Bauduin/cloud/SaveCEFE/Manuscript/Chap3/data/networksData.RData")
op_netStat2 <- networksData
load("C:/Users/Bauduin/cloud/SaveCEFE/Manuscript/Chap3/data/networkPAs.RData")
op <- networkPAs
# Selected 501 designs
q <- 0.925
selected <- op_netStat2$represent>quantile(op_netStat2$represent,q)&op_netStat2$sumCurrMov>quantile(op_netStat2$sumCurrMov,q)&op_netStat2$sumFutMov>quantile(op_netStat2$sumFutMov,q)
# Plot for current functional connectivity
plot(op_netStat2$represent,op_netStat2$sumCurrMov,
xlab="Ecological representativeness",ylab="Current functional connectivity",
pch=16, col=adjustcolor("black", alpha=0.01))
q <- 0.925 # quantile to increase from 0 to 1
bestNet <- op_netStat2[op_netStat2$represent > quantile(op_netStat2$represent, q) &
op_netStat2$sumCurrMov > quantile(op_netStat2$sumCurrMov, q) &
op_netStat2$sumFutMov > quantile(op_netStat2$sumFutMov, q),]
nrow(bestNet)
# Identify the benchmarks used in the best networks
opBest <- op[op$net %in% bestNet$net,]
listBenchmBest <- list()
for(i in 1:nrow(opBest)){
listBenchmBest[[i]] <- benchm$PB[benchm$PB %in% unlist(lapply(opBest[i,9:677], toString))]
}
# op_netStat2 = 500,000 networks constructed with the ecological representativeness (distance) done
# DonneesGaspesie_2014 = donn?es les plus r?centes
# _public = sur terre publiques uniquement
# benchmark composing these networks are available in op4_netStatistics.csv in the same folder
# benchmarks shapefile is available at
benchm <- shapefile("D:/Save_pc_portable/Thesis/Chapitre3_AP_Beacons/ArcGIS/DonneesGaspesie_2014/benchmark_building_public/output_builder/merged_benchm_Dissolve.shp")
# Identify the benchmarks used in the best networks
opBest <- op[op$net %in% bestNet$net,]
listBenchmBest <- list()
for(i in 1:nrow(opBest)){
listBenchmBest[[i]] <- benchm$PB[benchm$PB %in% unlist(lapply(opBest[i,9:677], toString))]
}
benchmBest <- unlist(listBenchmBest)
benchmBestHist <- table(benchmBest)[order(-table(benchmBest))]
names(benchmBestHist)<-1:689
# Create the best networks
listBestNet <- list()
APPoly <- SpatialPolygons(AP@polygons, proj4string = AP@proj4string)
for(i in 1:nrow(opBest)){
benchmUsed <- SpatialPolygons(benchm[benchm$PB %in% unlist(lapply(opBest[i,9:677], toString)),]@polygons, proj4string = benchm@proj4string)
benchmAP <- rbind(benchmUsed, APPoly, makeUniqueIDs = TRUE)
benchmAP <- gBuffer(benchmAP, byid=TRUE, width=0) # to fix an error with unionSpatialPolygons
listBestNet[[i]] <- unionSpatialPolygons(benchmAP, IDs = rep(1, length(benchmAP)))
}
# Done
# cellRaster <- setValues(currentMov, 1:6549345)
# #benchmAPErased <- shapefile("D:/PhD/Chapitre3_AP_Beacons/ArcGIS/DonneesGaspesie_2014/benchmark_building_public/output_builder/merged_benchm_Dissolve_AP_Erased.shp")
#
# # Aire protegees
AP <- shapefile("D:/Save_pc_portable/Thesis/Chapitre3_AP_Beacons/ArcGIS/DonneesGaspesie_2014/new/AP_Project1.shp")
APPoly <- SpatialPolygons(AP@polygons, proj4string = AP@proj4string)
for(i in 1:nrow(opBest)){
benchmUsed <- SpatialPolygons(benchm[benchm$PB %in% unlist(lapply(opBest[i,9:677], toString)),]@polygons, proj4string = benchm@proj4string)
benchmAP <- rbind(benchmUsed, APPoly, makeUniqueIDs = TRUE)
benchmAP <- gBuffer(benchmAP, byid=TRUE, width=0) # to fix an error with unionSpatialPolygons
listBestNet[[i]] <- unionSpatialPolygons(benchmAP, IDs = rep(1, length(benchmAP)))
}
gaspNat <- shapefile("D:/Save_pc_portable/Thesis/Chapitre1_IBM/ArcGIS/study_area/gaspe_nat_Project.shp")
library(SpaDES)
dev()
plot(gaspNat, col=NA, border="black")
for(i in 1:length(listBestNet)){
plot(listBestNet[[i]], col=rgb(0.8,0.6,0.2,0.03),border=NA, add=TRUE)
print(i)
}
benchmBestHist <- table(benchmBest)[order(-table(benchmBest))]
benchmBestHist
length(benchmBestHist)
candidatePAs <- shapefile("D:/SaveCEFE/Manuscript/Chap3/data/candidatePAs.shp")
candidatePAs
nTimeUsedInNetworks <- as.data.frame(benchmBestHist)
nTimeUsedInNetworks
nrow(nTimeUsedInNetworks)
length(candidatePAs)
mergeDF <- merge(candidatePAs@data)
mergeDF <- merge(candidatePAs@data, nTimeUsedInNetworks, by.x="PB", by.y="benchmBest")
mergeDF
nrow(mergeDF)
candidatePAs@data
candidatePAs2 <- candidatePAs[candidatePAs$PB %in% mergeDF$PB,]
candidatePAs2
candidatePAs2@data <- cbind(candidatePAs2@data, mergeDF)
candidatePAs2
candidatePAs2@data
candidatePAs2@data[,"PB"]
candidatePAs2@data <- cbind(candidatePAs2@data, PB2=mergeDF$PB, Freq=mergeDF$Freq)
all(candidatePAs2@data$PB ==candidatePAs2@data$PB2)
candidatePAs2@data <- candidatePAs2@data[,c(1,2,4)]
candidatePAs2
candidatePAsFreq@data <- cbind(PB = candidatePAs2@data$PB, Freq = mergeDF$Freq)
candidatePAs2@data <- cbind(PB = candidatePAs2@data$PB, Freq = mergeDF$Freq)
candidatePAs2
cbind.data.frame(PB = candidatePAs2@data$PB, Freq = mergeDF$Freq)
candidatePAs2@data<- cbind.data.frame(PB = candidatePAs2@data$PB, Freq = mergeDF$Freq)
candidatePAsFreq <- candidatePAs2
candidatePAsFreq
writeOGR(candidatePAsFreq, ".", "candidatePAsFreq",
driver = "ESRI Shapefile")
getwd()
library(raster)
library(rgdal)
library(rgeos)
library(maptools)
# op_netStat2 = 500,000 networks constructed with the ecological representativeness (distance) done
# DonneesGaspesie_2014 = donn?es les plus r?centes
# _public = sur terre publiques uniquement
# benchmark composing these networks are available in op4_netStatistics.csv in the same folder
# benchmarks shapefile is available at
benchm <- shapefile("D:/Save_pc_portable/Thesis/Chapitre3_AP_Beacons/ArcGIS/DonneesGaspesie_2014/benchmark_building_public/output_builder/merged_benchm_Dissolve.shp")
# Done
# cellRaster <- setValues(currentMov, 1:6549345)
# #benchmAPErased <- shapefile("D:/PhD/Chapitre3_AP_Beacons/ArcGIS/DonneesGaspesie_2014/benchmark_building_public/output_builder/merged_benchm_Dissolve_AP_Erased.shp")
#
# # Aire protegees
AP <- shapefile("D:/Save_pc_portable/Thesis/Chapitre3_AP_Beacons/ArcGIS/DonneesGaspesie_2014/new/AP_Project1.shp")
load("C:/Users/Bauduin/cloud/SaveCEFE/Manuscript/Chap3/data/networksData.RData")
op_netStat2 <- networksData
load("C:/Users/Bauduin/cloud/SaveCEFE/Manuscript/Chap3/data/networkPAs.RData")
op <- networkPAs
# Selected 501 designs
q <- 0.925
selected <- op_netStat2$represent>quantile(op_netStat2$represent,q)&op_netStat2$sumCurrMov>quantile(op_netStat2$sumCurrMov,q)&op_netStat2$sumFutMov>quantile(op_netStat2$sumFutMov,q)
q <- 0.925 # quantile to increase from 0 to 1
bestNet <- op_netStat2[op_netStat2$represent > quantile(op_netStat2$represent, q) &
op_netStat2$sumCurrMov > quantile(op_netStat2$sumCurrMov, q) &
op_netStat2$sumFutMov > quantile(op_netStat2$sumFutMov, q),]
nrow(bestNet)
# op_netStat2 = 500,000 networks constructed with the ecological representativeness (distance) done
# DonneesGaspesie_2014 = donn?es les plus r?centes
# _public = sur terre publiques uniquement
# benchmark composing these networks are available in op4_netStatistics.csv in the same folder
# benchmarks shapefile is available at
benchm <- shapefile("D:/Save_pc_portable/Thesis/Chapitre3_AP_Beacons/ArcGIS/DonneesGaspesie_2014/benchmark_building_public/output_builder/merged_benchm_Dissolve.shp")
opBest <- op[op$net %in% bestNet$net,]
listBenchmBest <- list()
for(i in 1:nrow(opBest)){
listBenchmBest[[i]] <- benchm$PB[benchm$PB %in% unlist(lapply(opBest[i,9:677], toString))]
}
benchmBest <- unlist(listBenchmBest)
benchmBestHist <- table(benchmBest)[order(-table(benchmBest))]
names(benchmBestHist)<-1:689
listBestNet <- list()
APPoly <- SpatialPolygons(AP@polygons, proj4string = AP@proj4string)
for(i in 1:nrow(opBest)){
benchmUsed <- SpatialPolygons(benchm[benchm$PB %in% unlist(lapply(opBest[i,9:677], toString)),]@polygons, proj4string = benchm@proj4string)
benchmAP <- rbind(benchmUsed, APPoly, makeUniqueIDs = TRUE)
benchmAP <- gBuffer(benchmAP, byid=TRUE, width=0) # to fix an error with unionSpatialPolygons
listBestNet[[i]] <- unionSpatialPolygons(benchmAP, IDs = rep(1, length(benchmAP)))
}
# Plots
gaspNat <- shapefile("D:/Save_pc_portable/Thesis/Chapitre1_IBM/ArcGIS/study_area/gaspe_nat_Project.shp")
library(SpaDES)
dev()
plot(gaspNat, col=NA, border="black")
listBestNet
benchmBestHist <- table(benchmBest)[order(-table(benchmBest))]
benchmBestHist
plot(unionSpatialPolygons(benchm[benchm$PB %in% names(benchmBestHist[benchmBestHist > 35]),],
IDs = rep(1, length(benchmBestHist[benchmBestHist > 35]))),
add=TRUE, col=NA,border="darkgoldenrod4", lwd=3)
benchm[benchm$PB %in% names(benchmBestHist[benchmBestHist > 35]),]
benchm[benchm$PB %in% names(benchmBestHist[benchmBestHist > 35]),]$PB
benchmBestHist
benchm
aa <- merge(benchm@data,as.data.frame(benchmBestHist), by.x="PB", by.y="benchmBest")
head(aa)
benchm2 <- benchm[benchm$PB %in% aa$PB]
benchm2 <- benchm[benchm$PB %in% aa$PB,]
benchm2@data <- aa
plot(benchm2[benchm2$Freq>35,])
plot(benchm2[benchm2$Freq>35,],col="red")
writeOGR(benchm2, ".", "candidatePAsFreq",
driver = "ESRI Shapefile")
getwd()
